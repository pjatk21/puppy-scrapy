type Subscription {
  tasksDispositions(scraperId: ID!): ScrapTask
}

enum TaskState {
  """Task is looking for a scrapper that can execute it."""
  WAITING

  """Task is being executed by a scrapper."""
  RUNNING

  """All available scrappers rejected task execution."""
  REJECTED

  """Task execution finished."""
  DONE
}

type Mutation {
  updateOwnState(scraperId: ID!, state: String!): String!
  updateTaskState(taskId: ID!, state: String!): String!
  triggerTask(taskId: ID!): String!
  createPuppy(name: String!, age: Int!): Puppy
  processFragment(html: String!): ScheduledEvent!
}

"""Arguments required to start scrapping."""
type ScrapTask {
  id: ID!
  name: String!

  """State of task"""
  state: TaskState!

  """First day to scrap"""
  since: DateTime!

  """Last day to scrap"""
  until: DateTime!
}

type Puppy {
  id: ID!
  name: String!
  age: Int!
}

type Query {
  allPuppies: [Puppy!]!
  puppy(id: ID!): Puppy
  puppies(id: [ID!]!): [Puppy!]!
  availableGroups: [String!]!
  availableHosts: [String!]!
  allEvents(groups: [String!], hosts: [String!], type: EventType): [ScheduledEvent!]!
  rangeEvents(begin: DateTime!, end: DateTime!, groups: [String!], hosts: [String!], type: EventType): [ScheduledEvent!]!
}

"""Scalar representing a datetime as an ISO string"""
scalar DateTime

enum EventType {
  reservation
  exam
  workshop
  lecture
  other
}

type ScheduledEvent {
  id: ID!
  begin: DateTime!
  end: DateTime!
  title: String!
  code: String!
  groups: [String!]!
  hosts: [String!]!
  room: String!
  type: EventType!
}
